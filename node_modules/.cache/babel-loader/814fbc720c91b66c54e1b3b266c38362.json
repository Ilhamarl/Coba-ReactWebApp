{"ast":null,"code":"var _jsxFileName = \"/Users/mamikos/Documents/WebDev/cobareactwebapp/src/pages/Products.js\";\nimport React, { Component, useState } from 'react';\n\nfunction Products() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:8000/api/product\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result.items);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 14\n      }\n    }, \"Error: \", error.message);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 14\n      }\n    }, \"Loading...\");\n  } else {\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, items.map(item => /*#__PURE__*/React.createElement(\"li\", {\n      key: item.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, item.name, \" \", item.price)));\n  }\n}\n\nexport default Products;","map":{"version":3,"sources":["/Users/mamikos/Documents/WebDev/cobareactwebapp/src/pages/Products.js"],"names":["React","Component","useState","Products","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","then","res","json","result","message","map","item","name","price"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAASC,QAAT,GAAoB;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC,CAHgB,CAKhB;AACA;AACA;;AACAQ,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CAAC,mCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVR,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACM,MAAM,CAACP,KAAR,CAAR;AACD,KANL,EAOI;AACA;AACA;AACCJ,IAAAA,KAAD,IAAW;AACTG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAbL;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,MAAIA,KAAJ,EACA;AACE,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaA,KAAK,CAACY,OAAnB,CAAP;AACD,GAHD,MAIK,IAAI,CAACV,QAAL,EACL;AACE,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,GAHI,MAML;AACE,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGE,KAAK,CAACS,GAAN,CAAUC,IAAI,iBACb;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,IAAI,CAACC,IADR,OACeD,IAAI,CAACE,KADpB,CADD,CADH,CADF;AASD;AACF;;AAEH,eAAejB,QAAf","sourcesContent":["import React, { Component, useState } from 'react';\n\nfunction Products() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n  \n    // Note: the empty deps array [] means\n    // this useEffect will run once\n    // similar to componentDidMount()\n    useEffect(() => {\n      fetch(\"http://127.0.0.1:8000/api/product\")\n        .then(res => res.json())\n        .then(\n          (result) => {\n            setIsLoaded(true);\n            setItems(result.items);\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n            setIsLoaded(true);\n            setError(error);\n          }\n        )\n    }, [])\n  \n    if (error) \n    {\n      return <div>Error: {error.message}</div>;\n    } \n    else if (!isLoaded) \n    {\n      return <div>Loading...</div>;\n    } \n\n    else \n    {\n      return (\n        <ul>\n          {items.map(item => (\n            <li key={item.name}>\n              {item.name} {item.price}\n            </li>\n          ))}\n        </ul>\n      );\n    }\n  }\n\nexport default Products;"]},"metadata":{},"sourceType":"module"}